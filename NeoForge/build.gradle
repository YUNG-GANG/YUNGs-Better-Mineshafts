plugins {
    id 'multiloader-loader'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
def at = file('src/main/resources/META-INF/accesstransformer.cfg')
if (at.exists()) {
    accessTransformers.add(at.absolutePath)
}

runs {
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    implementation "com.yungnickyoung.minecraft.yungsapi:YungsApi:${mc_version}-NeoForge-${yungsapi_version}"
}

String[] compatibleVersions = project.compatible_versions.split(',')
task publishCurseForgeNeoForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn(tasks.jar)
    apiToken = curseforgeApiKey

    debugMode = debug_publish.toBoolean()

    def mainFile = upload(curseforge_project_id_neoforge, tasks.jar.archiveFile)
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    mainFile.releaseType = 'release'
    mainFile.addRequirement('yungs-api-neoforge')
    mainFile.addModLoader('neoforge')
    mainFile.displayName = "[${mc_version}] ${mod_full_name} v${rawVersion} (NeoForge)"
    compatibleVersions.each { version ->
        mainFile.addGameVersion(version)
    }
}

List compatibleVersionsList = project.compatible_versions.split(',')
modrinth {
    token = modrinthToken
    projectId = modrinth_project_id
    versionNumber = version
    versionName = "[${mc_version}] v${rawVersion} (NeoForge)"
    versionType = "release"
    uploadFile = jar
    gameVersions = compatibleVersionsList
    debugMode = debug_publish.toBoolean()
    changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "yungs-api"
    }
}
tasks.modrinth.dependsOn(tasks.jar)