plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0.25,6.2)'
    id 'org.spongepowered.mixin'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

// Forge no longer uses reobf task which previously automatically added MixinConfigs to the manifest,
// so we have to do it manually.
jar {
    manifest {
        attributes([
                'MixinConfigs': "${mod_id}.mixins.json",
        ])
    }
}

// Hack fix that fixes resolution issues with jopt-simple.
// Not sure why this is needed, but it fixes the error.
configurations.all {
    resolutionStrategy {
        force 'net.sf.jopt-simple:jopt-simple:5.0.4'
    }
}

minecraft {
    mappings channel: 'official', version: mc_version

    // Tell FG to not automtically create the reobf tasks, as we now use Official mappings at runtime, If you don't use them at dev time then you'll have to fix your reobf yourself.
    reobf = false

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation "com.yungnickyoung.minecraft.yungsapi:YungsApi:${mc_version}-Forge-${yungsapi_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version, but some transitive dependencies request 6.0+
    // Recommended by Forge.
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

mixin {
//    add(sourceSets.main, "${mod_id}.refmap.json")
    config "${mod_id}.mixins.json"
//    config "${mod_id}_forge.mixins.json"
}

// Merge the resources and classes into the same directory.
// This is done because java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

String[] compatibleVersions = project.compatible_versions.split(',')
task publishCurseForgeForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn(tasks.jar)
    apiToken = curseforgeApiKey

    debugMode = debug_publish.toBoolean()

    def mainFile = upload(curseforge_project_id_forge, tasks.jar.archiveFile)
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    mainFile.releaseType = 'release'
    mainFile.addRequirement('yungs-api')
    mainFile.displayName = "[${mc_version}] ${mod_full_name} v${rawVersion} (Forge)"
    compatibleVersions.each { version ->
        mainFile.addGameVersion(version)
    }
}

List compatibleVersionsList = project.compatible_versions.split(',')
modrinth {
    token = modrinthToken
    projectId = modrinth_project_id
    versionNumber = version
    versionName = "[${mc_version}] v${rawVersion} (Forge)"
    versionType = "release"
    uploadFile = jar
    gameVersions = compatibleVersionsList
    debugMode = debug_publish.toBoolean()
    changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "yungs-api"
    }
}
tasks.modrinth.dependsOn(tasks.jar)